class Solution {
public:
    int minTimeToReach(vector<vector<int>>& grid) {
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> minTime(m, vector<int>(n, INT_MAX));
        vector<pair<int, int>> dir ={{0,-1}, {0,1}, {1,0}, {-1,0}};
        pq.push({0, 0, 0});
        minTime[0][0];

        while(!pq.empty()){
            auto time = pq.top()[0];
            auto row = pq.top()[1];
            auto col = pq.top()[2];
            pq.pop();

            if(row == m-1 && col == n-1) return time;
            for(auto[dx, dy] : dir){
                int nr = row + dx, nc = col + dy;
                if(nr >=0 && nr < m && nc >=0 && nc < n){
                    int start = max(time, grid[nr][nc]);
                    int newTime = start + 1;
                    if(newTime < minTime[nr][nc]){
                        minTime[nr][nc] = newTime;
                        pq.push({newTime, nr, nc});
                    }
                }
            }
        }
        return -1;
    }
};
