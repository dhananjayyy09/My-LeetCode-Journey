class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
         vector<pair<int,int>> dirs = {
            {1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}
        };

        queue<tuple<int,int,int>> q; // {row, col, dist}
        q.push({0, 0, 1});
        vector<vector<int>> visited(n, vector<int>(n, 0));
        visited[0][0] = 1;

        while(!q.empty()){
            auto[r, c, d] = q.front();
            q.pop();

            if(r == n-1 && c == n-1) return d;
            for(auto [dr, dc] : dirs){
                int nr = r+dr, nc = c+dc;
                if(nr >= 0 && nr < n && nc >=0 && nc < n && !visited[nr][nc] && grid[nr][nc] != 1){
                    visited[nr][nc] = 1;
                    q.push({nr, nc, d+1});
                }
            }
        }
        return -1;
    }
};
