class Solution {
public:
    int minCost(int n, vector<vector<int>>& edges) {
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<vector<pair<int,int>>> adj(n);
        for(auto &e : edges){
            int u = e[0];
            int v = e[1];
            int w = e[2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, 2*w});
        }
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        pq.push({0, 0});

        while(!pq.empty()){
            auto currDis = pq.top().first;
            auto node = pq.top().second;
            pq.pop();

            if (currDis > dist[node]) continue;
            if(node == n-1) return dist[n-1];
            for(auto it : adj[node]){
                auto adjNode = it.first;
                auto wt = it.second;
                if(wt + currDis < dist[adjNode]){
                    dist[adjNode] = wt + currDis;
                    pq.push({dist[adjNode], adjNode});
                }
            }
        }
        return -1;
    }
};
