class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        unordered_map<int, vector<pair<int, int>>> adj;
        for(auto &it : times){
            int u = it[0];
            int v = it[1];
            int w = it[2];
            adj[u].push_back({v, w});
        }
        vector<int> dist(n+1, 1e9);
        dist[k] = 0;
        pq.push({0,k});

        while(!pq.empty()){
            auto dis = pq.top().first;
            auto node = pq.top().second;
            pq.pop();
            for(auto &it : adj[node]){
                int adjNode = it.first;
                int wt = it.second;
                if(dis + wt < dist[adjNode]){
                    dist[adjNode] = dis + wt;
                    pq.push({dist[adjNode], adjNode});
                }
            }
        }

        int ans = -1e9;
        for(int i=1; i<=n; i++){
            ans = max(dist[i], ans);
        }
        return ans == 1e9 ? -1 : ans;
    }
};
