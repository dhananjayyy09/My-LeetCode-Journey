class DisjointSet {
public:
    vector<int> rank, par, size;
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        par.resize(n + 1, 0);
        size.resize(n + 1, 0);
        for (int i = 0; i < n; i++) {
            par[i] = i;
        }
    }

    int findPar( int node) {
        if (node == par[node])
            return node;
        return par[node] = findPar(par[node]);
    }

    void unionByRank(int u, int v) {
        int ult_u = findPar(u);
        int ult_v = findPar(v);
        if (ult_u == ult_v)
            return;

        if (rank[ult_u] > rank[ult_v]) {
            par[ult_v] = ult_u;
        } else if (rank[ult_u] < rank[ult_v]) {
            par[ult_u] = ult_v;
        } else {
            par[ult_u] = ult_v;
            rank[ult_v]++;
        }
    }

    void unionBySize(int u, int v){
        int ult_u = findPar(u);
        int ult_v = findPar(v);
        if(ult_u == ult_v) return;
        if(size[ult_u] < size[ult_v]){
            par[ult_u] = par[ult_v];
            size[ult_v] += size[ult_u];
        } 
        else{
            par[ult_v] = par[ult_u];
            size[ult_u] += size[ult_v];
        }
    }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisjointSet ds(n);
        unordered_map<string, int> mapMail;
        for(int i=0; i<n; i++){
            for(int j=1; j<accounts[i].size(); j++){
                string mail = accounts[i][j]; 
                if(mapMail.find(mail) == mapMail.end()){
                    mapMail[mail] = i;
                }
                else{
                    ds.unionBySize(i, mapMail[mail]);
                }
            }
        }

        vector<vector<string>> mergedMail(n);
        for(auto& it : mapMail){
            string mail = it.first;
            int node = ds.findPar(it.second);
            mergedMail[node].push_back(mail);
        }

        vector<vector<string>> ans;
        for(int i=0; i<n; i++){
            if(mergedMail[i].size() == 0) continue;
            sort(mergedMail[i].begin(), mergedMail[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for(auto &mail : mergedMail[i]){
                temp.push_back(mail);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
