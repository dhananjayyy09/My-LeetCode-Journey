class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k){
        vector<pair<int, int>> adj[n];
        for(auto it : flights){
            adj[it[0]].push_back({it[1], it[2]});
        }

        queue<pair<int, pair<int, int>>> q; // {stops, node, distance}
        q.push({0, {src, 0}});
        vector<int> dist(n, 1e9);
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int stops = it.first, node = it.second.first, cost = it.second.second;
            if(stops > k) continue;
            for(auto i : adj[node]){
                int nbr = i.first;
                int wt = i.second;
                if(cost + wt < dist[nbr] &&  stops <= k){
                    dist[nbr] = cost + wt;
                    q.push({stops+1, {nbr, dist[nbr]}});
                }
            }
        }
        if(dist[dst] == 1e9){
            return -1;
        }          
        return dist[dst];
    }
};
