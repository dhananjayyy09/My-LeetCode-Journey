class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        if (m > 1 && n > 1 && grid[0][1] > 1 && grid[1][0] > 1)
            return -1;

        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        vector<vector<int>> minTime(m, vector<int>(n, INT_MAX));
        vector<pair<int, int>> dir = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        pq.push({0, 0, 0});
        minTime[0][0] = 0;

        while (!pq.empty()) {
            auto time = pq.top()[0];
            auto row = pq.top()[1];
            auto col = pq.top()[2];
            pq.pop();

            if (row == m - 1 && col == n - 1)return time;
            for (int i = 0; i < 4; i++) {
                int nr = row + dir[i].first, nc = col + dir[i].second;
                if (nr >= 0 && nr < m && nc >= 0 && nc < n) {
                    int newTime = time + 1;
                    if (newTime < grid[nr][nc]) {
                        int diff = grid[nr][nc] - newTime;
                        newTime = grid[nr][nc] + (diff % 2);
                    }
                    if (newTime < minTime[nr][nc]) {
                        minTime[nr][nc] = newTime;
                        pq.push({newTime, nr, nc});
                    }
                }
            }
        }
        return -1;
    }
};
