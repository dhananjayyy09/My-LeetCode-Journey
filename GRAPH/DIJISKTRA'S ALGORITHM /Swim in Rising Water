class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        vector<vector<int>> minTime(n, vector<int>(n, INT_MAX));
        minTime[0][0] = grid[0][0];
        pq.push({minTime[0][0], 0, 0});
        vector<pair<int, int>> dir = {{0,-1}, {0,1}, {1,0}, {-1,0}};

        while(!pq.empty()){
            int currTime = pq.top()[0];
            int row = pq.top()[1];
            int col = pq.top()[2];
            pq.pop();

            if(row == n-1 && col == n-1) return currTime;
            for(int i=0; i<4; i++){
                int nr = row + dir[i].first, nc = col +  dir[i].second;
                if(nr >=0 && nr < n && nc >= 0 && nc < n){
                    int newTime = max(currTime, grid[nr][nc]);
                    if(newTime < minTime[nr][nc]){
                        minTime[nr][nc] = newTime;
                        pq.push({newTime, nr, nc});
                    }
                }
            }
        }
        return -1;
    }
};
