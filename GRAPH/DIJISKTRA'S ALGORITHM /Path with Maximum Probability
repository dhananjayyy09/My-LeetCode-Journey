class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int src, int dst) {
        priority_queue<pair<double, int>> pq;
        vector<vector<pair<int,double>>> adj(n); // u,v,p
        for(int i=0; i<edges.size(); i++){
            int u = edges[i][0], v = edges[i][1];
            double prob = succProb[i];
            adj[u].push_back({v, prob});
            adj[v].push_back({u, prob});
        }
        vector<double> pro(n, 0);
        pro[src] = 1.0;
        pq.push({1.0, src});
        
        while(!pq.empty()){
            double currPro = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto &it : adj[node]){
                auto adjNode = it.first;
                auto edgePro = it.second;
                if(edgePro * currPro > pro[adjNode]){
                    pro[adjNode] = edgePro * currPro;
                    pq.push({pro[adjNode], adjNode});
                } 
            }
        }
        return pro[dst];
    }
};
