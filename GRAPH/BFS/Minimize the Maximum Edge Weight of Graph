class Solution {
public:
    bool bfs(int n, vector<vector<pair<int,int>>> &adj, int maxW){
        vector<bool>vis (n, false);
        queue<int> q;
        q.push(0);
        vis[0] = true;

        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it : adj[node]){
                int v = it.first;
                int wt = it.second;
                if(wt <= maxW && !vis[v]){
                    vis[v] = true;
                    q.push(v);
                 }
            }
        }

        for(int i=0; i<n; i++){
            if(!vis[i]){
                return false;
            }
        }
        return true;
    }

    int minMaxWeight(int n, vector<vector<int>>& edges, int threshold) {
        vector<vector<pair<int,int>>> adj(n);
        int maxWt = -1e9;
        for(auto &e : edges){
            int u = e[0], v = e[1], w = e[2];
            adj[v].push_back({u, w});
            maxWt = max(maxWt, w);
        }

        int l = 0, h = maxWt;
        int ans = INT_MAX;
        while(l <= h){
            int mid = l + (h-l)/2;
            if(bfs(n, adj, mid)){
                ans = mid;
                h = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        return ans == INT_MAX ? -1 : ans;
    }
};
