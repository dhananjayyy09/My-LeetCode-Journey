class Solution {
public:
    void bfs(vector<vector<char>>& grid, int i, int j) {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int, int>> q;
        grid[i][j] = 0;
        vector<pair<int, int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        q.push({i, j});

        while(!q.empty()){
            auto [row, col] = q.front();
            q.pop();
            for (auto [dr, dc] : dir){
                int nr = row + dr;
                int nc = col + dc;
                if (nr >= 0 && nr < m && nc >= 0 && nc < n && grid[nr][nc] == '1'){
                    q.push({nr, nc});
                    grid[nr][nc] = '0';
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        int m = grid.size(), n = grid[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    bfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
};
