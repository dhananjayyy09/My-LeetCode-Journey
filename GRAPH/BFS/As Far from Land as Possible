class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<pair<int, int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        queue<pair<int, int>>q;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){ 
                    q.push({i, j});
                }
            }
        }
        if (q.empty() || q.size() == n*n) return -1;

        int maxDis = -1;
        while(!q.empty()){
            int size = q.size();
            maxDis++;

            while(size--){
                auto[row, col] = q.front();
                q.pop();
                for(auto[dx, dy] : dir){
                    int nr = dx + row, nc = dy + col;
                    if(nr >= 0 && nr < n && nc >= 0 && nc < n && grid[nr][nc] == 0){
                        grid[nr][nc] = 1;
                        q.push({nr, nc});
                    }
                }
            }
        }
        return maxDis;
    }
};
