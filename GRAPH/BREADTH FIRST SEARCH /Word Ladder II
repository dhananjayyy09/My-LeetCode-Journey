class Solution {
public:
    vector<vector<string>> findLadders(string beg, string en, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(), wordList.end());
        queue<vector<string>> q;
        q.push({beg});
        vector<string> used;
        int lvl = 1;
        vector<vector<string>> ans;
        
        while (!q.empty()) {
            vector<string> vec = q.front();
            q.pop();
            
            if (vec.size() > lvl) {
                lvl++;
                for (auto &w : used) st.erase(w);
                used.clear();
            }
            
            string word = vec.back();
            if (word == en) {
                if (ans.empty() || vec.size() == ans[0].size())
                    ans.push_back(vec);
                continue; // donâ€™t expand further once end is reached
            }
            
            for (int i = 0; i < word.size(); i++) {
                string org = word;
                for (char c = 'a'; c <= 'z'; c++) {
                    word[i] = c;
                    if (st.count(word)) {
                        vec.push_back(word);
                        q.push(vec);
                        used.push_back(word);
                        vec.pop_back();
                    }
                }
                word = org;
            }
        }
        return ans;
    }
};
