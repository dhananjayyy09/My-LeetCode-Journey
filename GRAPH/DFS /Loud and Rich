class Solution {
public:
    int dfs(int i, vector<int>& quiet, vector<vector<int>> &adj, vector<int>& ans){
        if(ans[i] != -1) return ans[i];
        ans[i] = i;
        for(auto it : adj[i]){
            int quiter = dfs(it, quiet, adj, ans);
            if(quiet[quiter] < quiet[ans[i]]){
                ans[i] = quiter;
            }
        }
        return ans[i];
    }

    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n = quiet.size();
        vector<vector<int>> adj(n);
        for(auto it : richer){
            int u = it[0] , v = it[1];
            adj[v].push_back(u);
        }
        vector<int> ans(n, -1);
        for(int i=0; i<n; i++){
            dfs(i, quiet, adj, ans);
        }
        return ans;
    }
};
