class Solution {
public:
    void dfs(int node, vector<bool> &visited, vector<vector<int>> &adj){
        visited[node] = true;
        for(auto it : adj[node]){
            if(!visited[it]){
                dfs(it, visited, adj);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<vector<int>> adj(n);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(isConnected[i][j] == 1 && i!=j){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<bool> visited(n, false);
        int count = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(!visited[i]){
                    dfs(i, visited, adj);
                    count++;
                }
            }
        }
        return count; 
    }
};
