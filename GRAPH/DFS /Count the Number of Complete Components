class Solution {
public:
    void dfs(int node, vector<vector<int>>&adj, vector<bool> &visited, int &edge, int &nodeCount){
        visited[node] = true;
        nodeCount++;
        edge += adj[node].size();
        for(auto it : adj[node]){
            if(!visited[it]){
                dfs(it, adj, visited, edge, nodeCount);
            }
        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        vector<bool>visited (n, false);
        for(auto &a : edges){
            int u = a[0];
            int v = a[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        int count = 0;
        for(int i=0; i<n; i++){
            if(!visited[i]){
                int edge = 0, nodes = 0; 
                dfs(i, adj, visited, edge, nodes);
                edge /= 2;
                int maxEdge = nodes * (nodes-1) / 2;
                if(maxEdge == edge){
                    count++;
                }
            }
        }
        return count;
    }
};
