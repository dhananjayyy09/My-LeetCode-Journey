class Solution {
public:
    int dfs(int node, int par, vector<vector<int>> &adj, vector<bool> &hasApple){
        int time = 0;
        for(int child : adj[node]){
            if(child == par) continue;
            int cTime = dfs(child, node, adj, hasApple);
            if(cTime > 0 || hasApple[child]){
                time += cTime+2;
            }
        }
        return time;
    }    
    
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        return dfs(0, -1, adj, hasApple);
    }
};
