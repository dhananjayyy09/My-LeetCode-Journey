class Solution {
public:
    bool dfs(int i, int j, vector<vector<char>>& board, string word, int wi) {
        if (wi == word.size())
            return true;

        int m = board.size();
        int n = board[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word[wi])
            return false;

        char temp = board[i][j];
        board[i][j] = 0;

        bool found =
            dfs(i + 1, j, board, word, wi + 1) || dfs(i - 1, j, board, word, wi + 1) ||
            dfs(i, j + 1, board, word, wi + 1) || dfs(i, j - 1, board, word, wi + 1);

        board[i][j] = temp; // backtrack
        return found;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    if (dfs(i, j, board, word, 0))
                        return true;
                }
            }
        }
        return false;
    }
};
