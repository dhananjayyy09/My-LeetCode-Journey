class Solution {
public:
    void dfs(int node, vector<bool>& vis, vector<int> &dis, vector<int>& edges){
        vis[node] = true;
        int v = edges[node];
        if(v != -1 && !vis[v]){
            vis[v] = true;
            dis[v] = 1 + dis[node];
            dfs(v, vis, dis, edges);
        }
    }

    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        vector<int> dis1(n, INT_MAX);
        vector<int> dis2(n, INT_MAX);

        vector<bool> vis1(n, false);
        vector<bool> vis2(n, false);

        dis1[node1] = 0;
        dis2[node2] = 0;
        
        dfs(node1, vis1, dis1, edges);
        dfs(node2, vis2, dis2, edges);

        int minDis = INT_MAX;
        int minNode = -1;
        for(int i=0; i<n; i++){
            int maxD = max(dis1[i], dis2[i]);
            if(minDis > maxD){
                minDis = maxD;
                minNode = i;
            }
        }
        return minNode;
    }
};
