class Solution {
public:
    int maxJump(vector<int>& stones) {
        int n = stones.size();
        int max_jump = 0;

        // Traverse and find the worst jump needed
        for (int i = 1; i < n; i++) {
            max_jump = max(max_jump, stones[i] - stones[i - 1]);
        }

        // Check skipping pattern by considering two-step jumps
        for (int i = 2; i < n; i++) {
            max_jump = max(max_jump, stones[i] - stones[i - 2]);
        }

        return max_jump;
    }
};
