class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& desc) {
        unordered_map<int,TreeNode*> mp;
        unordered_set<int>childs;

        for(vector<int> & v : desc){
            int par = v[0];
            int child = v[1];
            int isLeft = v[2];

            if(mp.find(par) == mp.end()){
                mp[par] = new TreeNode(par);
            }

            if(mp.find(child) == mp.end()){
                mp[child] = new TreeNode(child);
            }

            if(isLeft == 1){
                mp[par]->left = mp[child];
            }
            else{
                mp[par]->right = mp[child];
            }
            childs.insert(child);
        }

        for(vector<int> & v : desc){
            int par = v[0];
            if(childs.find(par) == childs.end()){
                return mp[par];
            }
        }
        return NULL;
    }
};
