class Solution {
public:
    int calPointss(vector<string>& op) {
        vector<int> scores;
        int size = 0;
        for (auto i : op) {
            if (i == "+") {
                scores.push_back(scores[size - 1] + scores[size - 2]);
                size++;
            } else if (i == "D") {
                scores.push_back(2 * scores[size - 1]);
                size++;
            } else if (i == "C") {
                size--;
                scores.pop_back();
            } else {
                scores.push_back(stoi(i));
                size++;
            }
        }
        int sum = 0;
        for (int i = 0; i < scores.size(); i++) {
            sum += scores[i];
        }
        return sum;
    }

    // using stack
    int calPoints(vector<string>& ops) {
        stack<int> st;

        for (auto& op : ops) {
            if (op == "+") {
                int top1 = st.top(); // Need top two elements, so pop & store temporarily
                st.pop();
                int top2 = st.top();
                st.push(top1); // push back the first popped element
                st.push(top1 + top2);
            } else if (op == "D") {
                st.push(2 * st.top());
            } else if (op == "C") {
                st.pop();
            } else {
                st.push(stoi(op));
            }
        }

        int sum = 0;
        while (!st.empty()) {
            sum += st.top();
            st.pop();
        }
        return sum;
    }
};
