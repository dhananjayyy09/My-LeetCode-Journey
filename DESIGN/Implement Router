class Router {
public:
    int MAX_SIZE;
    unordered_map<string, vector<int>> packetStore;
    unordered_map<int, vector<int>> timeMap;
    queue<string> que;

    Router(int memoryLimit) { MAX_SIZE = memoryLimit; }

    string makeKey(int s, int d, int t) {
        return to_string(s) + "_" + to_string(d) + "_" + to_string(t);
    }

    bool addPacket(int src, int dst, int time) {
        string key = makeKey(src, dst, time);
        if (packetStore.find(key) != packetStore.end()) {
            return false;
        }

        if (que.size() >= MAX_SIZE) {
            forwardPacket();
        }

        packetStore[key] = {src, dst, time};
        que.push(key);
        timeMap[dst].push_back(time);

        return true;
    }

    vector<int> forwardPacket() {
        if (packetStore.empty()) {
            return {};
        }

        string key = que.front();
        que.pop();
        vector<int> pkt = packetStore[key];
        packetStore.erase(key);

        int d = pkt[1];
        timeMap[d].erase(timeMap[d].begin());
        return pkt;
    }

    int getCount(int dst, int start, int end) {
        auto it = timeMap.find(dst);
        if (it == timeMap.end() || it->second.empty()) {
            return 0;
        }

        vector<int> &timeStamp = it->second;
        int i = lower_bound(it->second.begin(), it->second.end(), start) -
                timeStamp.begin();
        int j = upper_bound(it->second.begin(), it->second.end(), end) -
                timeStamp.begin();

        return j - i;
    }
};
