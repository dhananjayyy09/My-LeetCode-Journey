class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        int n = rains.size();
        vector<int> ans(n, 0);
        unordered_map<int, int>mp;
        set<int> idx; 

        for(int i=0; i<n; i++){
            if(rains[i] == 0){
                idx.insert(i);
                continue;
            }
            if(mp.find(rains[i]) != mp.end()){
                if(idx.size() == 0) return {};
                else{
                    auto it = idx.lower_bound(mp[rains[i]]);
                    if(it == idx.end()) return {};
                    ans[*it] = rains[i];
                    idx.erase(it);
                }
            }
            ans[i] = -1;
            mp[rains[i]] = i;
        }

        for(int i=0; i<n; i++){
            if(ans[i] == 0){
                ans[i] = 1;
            }
        }

        return ans;
    }
};
