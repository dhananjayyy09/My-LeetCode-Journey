class Solution {
public:
    int solve(int i, int j, vector<vector<int>>& grid, int m, int n,
              vector<vector<int>>& dp) {
        if (i == 0 && j == 0)
            return grid[i][j];
        if (i < 0 || j < 0)
            return 1e9;
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int left = solve(i, j - 1, grid, m, n, dp);
        int up = solve(i - 1, j, grid, m, n, dp);

        return dp[i][j] = grid[i][j] + min(left, up);
    }

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(m-1, n-1, grid, m, n, dp);
    }
};
