class Solution {
public:
    bool isPall(string& s) {
        int i = 0, j = s.size() - 1;
        while (i < j) {
            if (s[i] != s[j]) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    // memoization
    int solve(int i, int n, string& s, vector<int>& dp) {
        if (i == n)
            return 0;

        if (dp[i] != -1)
            return dp[i];
        string temp = "";

        int mini = 1e9;
        for (int j = i; j < n; j++) {
            temp += s[j];
            if (isPall(temp)) {
                int cost = 1 + solve(j + 1, n, s, dp);
                mini = min(mini, cost);
            }
        }
        return dp[i] = mini;
    }

    int minCutt(string s) {
        int n = s.size();
        vector<int> dp(n + 1, -1);
        return solve(0, n, s, dp) - 1;
    }

    // tabulation
    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n + 1, 0);

        for (int i = n - 1; i >= 0; i--) {
            string temp = "";

            int mini = 1e9;
            for (int j = i; j < n; j++) {
                temp += s[j];
                if (isPall(temp)) {
                    int cost = 1 + dp[j + 1];
                    mini = min(mini, cost);
                }
            }
            dp[i] = mini;
        }
        return dp[0] - 1;
    }
};
