class Solution {
public:
    // memoization
    int solve(int i, int j, vector<int>& cuts, vector<vector<int>>& dp) {
        if (i > j)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];

        int mini = INT_MAX;
        for (int k = i; k <= j; ++k) {
            int cost = cuts[j + 1] - cuts[i - 1] + solve(i, k - 1, cuts, dp) +
                       solve(k + 1, j, cuts, dp);
            mini = min(mini, cost);
        }
        return dp[i][j] = mini;
    }

    int minCostt(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());

        int m = cuts.size();
        vector<vector<int>> dp(m, vector<int>(m, -1));

        return solve(1, m - 2, cuts, dp);
    }

    // tabulation
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());
        int m = cuts.size();

        vector<vector<int>> dp(m+2, vector<int>(m+2, 0));
        for (int i = m-2 ; i >= 1; i--) {
            for (int j = i; j <= m - 2; j++) {
                int mini = 1e9;
                for (int k = i; k <= j; ++k) {
                    int cost = cuts[j + 1] - cuts[i - 1] + dp[i][k - 1] + dp[k + 1][j];
                    mini = min(mini, cost);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][m-2];
    }
};
