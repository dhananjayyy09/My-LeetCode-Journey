class Solution {
public:
    // memoization
    int solve(int i, int buy, int k, int n, vector<int>& a,
              vector<vector<vector<int>>>& dp) {
        if (i == n || k == 0)
            return 0;
        int pro = 0;
        if (dp[i][buy][k] != -1)
            return dp[i][buy][k];
        if (buy) {
            pro = max(-a[i] + solve(i + 1, 0, k, n, a, dp),
                      solve(i + 1, 1, k, n, a, dp));
        } else
            pro = max(a[i] + solve(i + 1, 1, k - 1, n, a, dp),
                      solve(i + 1, 0, k, n, a, dp));

        return dp[i][buy][k] = pro;
    }

    int maxProfit(int k, vector<int>& a) {
        int n = a.size();
        vector<vector<vector<int>>> dp(
            n, vector<vector<int>>(2, vector<int>(k + 1, -1)));
        return solve(0, 1, k, n, a, dp);
    }
};
