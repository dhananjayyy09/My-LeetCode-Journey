class Solution {
public:
    // memoization
    int solve(int i, int buy, int n, vector<int>& prices, int fee,
              vector<vector<int>>& dp) {
        if (i == n)
            return 0;
        if (dp[i][buy] != -1)
            return dp[i][buy];
        if (buy) {
            dp[i][buy] = max(-prices[i] + solve(i + 1, 0, n, prices, fee, dp),
                             solve(i + 1, 1, n, prices, fee, dp));
        } else {
            dp[i][buy] =
                max(prices[i] - fee + solve(i + 1, 1, n, prices, fee, dp),
                    solve(i + 1, 0, n, prices, fee, dp));
        }
        return dp[i][buy];
    }

    //tabulation
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));

        for (int i = n - 1; i >= 0; i--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy) {
                    dp[i][buy] = max(dp[i + 1][0] - prices[i], dp[i + 1][1]);
                } 
                else {
                    dp[i][buy] = max((prices[i] - fee) + dp[i + 1][1], dp[i + 1][0]);
                }
            }
        }
        return dp[0][1];
    }
};
