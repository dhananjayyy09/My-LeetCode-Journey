class Solution {
public:
    // memoization
    int solve(int i, vector<int>& coins, int amt, vector<vector<int>>& dp) {
        if (amt == 0)
            return 0;
        if (i < 0 || amt < 0)
            return 1e9;
        if (dp[i][amt] != -1)
            return dp[i][amt];

        int notake = solve(i - 1, coins, amt, dp);
        int take = 1e9;
        if (coins[i] <= amt) {
            take = 1 + solve(i, coins, amt - coins[i], dp);
        }
        return dp[i][amt] = min(take, notake);
    }

    // tabulation
    int coincChange(vector<int>& coins, int amt) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amt + 1, 1e9));
        for (int i = 0; i < n; ++i)
            dp[i][0] = 0;

        for (int j = 1; j <= amt; ++j) {
            if (j % coins[0] == 0)
                dp[0][j] = j / coins[0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= amt; j++) {
                int notake = dp[i - 1][j];
                int take = 1e9;
                if (coins[i] <= j) {
                    take = 1 + dp[i][j - coins[i]];
                }
                dp[i][j] = min(take, notake);
            }
        }
        return (dp[n - 1][amt] >= 1e9) ? -1 : dp[n - 1][amt];
    }

    // space optimise
    int coinChange(vector<int>& coins, int amt) {
        int n = coins.size();
        vector<int> prev(amt + 1, 1e9), cur(amt + 1, 1e9);
        for (int i = 0; i < n; ++i)
            prev[0] = 0;

        for (int j = 1; j <= amt; ++j) {
            if (j % coins[0] == 0)
                prev[j] = j / coins[0];
        }

        for (int i = 1; i < n; i++) {
            cur[0] = 0;
            for (int j = 1; j <= amt; j++) {
                int notake = prev[j];
                int take = 1e9;
                if (coins[i] <= j) {
                    take = 1 + cur[j - coins[i]];
                }
                cur[j] = min(take, notake);
            }
            prev = cur;
        }
        return (prev[amt] >= 1e9) ? -1 : prev[amt];
    }
};
