class Solution {
public:
    // memoization
    int solve(string& word1, string& word2, int i, int j,
              vector<vector<int>>& dp) {
        if (i == 0)
            return j;
        if (j == 0)
            return i;
        if (dp[i][j] != -1)
            return dp[i][j];

        if (word1[i - 1] == word2[j - 1]) {
            return dp[i][j] = solve(word1, word2, i - 1, j - 1, dp);
        }

        int insert = solve(word1, word2, i, j - 1, dp);
        int del = solve(word1, word2, i - 1, j, dp);
        int replace = solve(word1, word2, i - 1, j - 1, dp);

        return dp[i][j] = 1 + min({insert, del, replace});
    }

    // tabulation
    int mindDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();

        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 0; i <= m; i++)
            dp[i][0] = i;
        for (int j = 0; j <= n; j++)
            dp[0][j] = j;

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] =
                        1 + min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]});
                }
            }
        }
        return dp[m][n];
    }

    // space optimise
    int minDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();

        vector<int> prev(n + 1, 0), cur(n + 1, 0);
        for (int j = 0; j <= n; j++)
            prev[j] = j;

        for (int i = 1; i <= m; i++) {
                cur[0] = i;
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    cur[j] = prev[j - 1];
                } else {
                    cur[j] = 1 + min({prev[j], cur[j - 1], prev[j - 1]});
                }
            }
            prev = cur;
        }
        return prev[n];
    }
};
