class Solution {
public:
    // memoization
    int solve(int i, int buy, int cap, int n, vector<int>& a,
              vector<vector<vector<int>>>& dp) {
        if (i == n || cap == 0)
            return 0;
        int pro = 0;
        if (dp[i][buy][cap] != -1)
            return dp[i][buy][cap];
        if (buy == 1) {
            pro = max(-a[i] + solve(i + 1, 0, cap, n, a, dp),
                      solve(i + 1, 1, cap, n, a, dp));
        } else
            pro = max(a[i] + solve(i + 1, 1, cap - 1, n, a, dp),
                      solve(i + 1, 0, cap, n, a, dp));

        return dp[i][buy][cap] = pro;
    }

    // tabulation
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(
            n + 1, vector<vector<int>>(2, vector<int>(3, 0)));

        for (int i = n - 1; i >= 0; i--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int cap = 1; cap <= 2; cap++) {
                    if (buy) {
                        dp[i][buy][cap] = max(-prices[i] + dp[i + 1][0][cap],
                                              0 + dp[i + 1][1][cap]);
                    } else {
                        dp[i][buy][cap] = max(prices[i] + dp[i + 1][1][cap - 1],
                                              0 + dp[i + 1][0][cap]);
                    }
                }
            }
        }
        return dp[0][1][2];
    }
};
