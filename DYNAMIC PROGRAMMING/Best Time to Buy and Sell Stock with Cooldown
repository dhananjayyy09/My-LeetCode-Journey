
class Solution {
public:
    // memoization
    int solve(int i, int buy, int n, vector<int>& prices,
              vector<vector<int>>& dp) {
        if (i >= n)
            return 0;
        if (dp[i][buy] != -1)
            return dp[i][buy];

        if (buy)
            dp[i][buy] = max(-prices[i] + solve(i + 1, 0, n, prices, dp),
                             solve(i + 1, 1, n, prices, dp));
        else
            dp[i][buy] = max(prices[i] + solve(i + 2, 1, n, prices, dp),
                             solve(i + 1, 0, n, prices, dp));
        return dp[i][buy];
    }

    // tabulation
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 2, vector<int>(2, 0));
        for (int i = n - 1; i >= 0; i--) {
            dp[i][1] = max(-prices[i] + dp[i + 1][0], dp[i + 1][1]);
            dp[i][0] = max(prices[i] + dp[i + 2][1], dp[i + 1][0]);
        }
        return dp[0][1];
    }
};
