class Solution {
public:
    // memoiazation
    bool solve(int i, int j, string& s1, string& s2, vector<vector<int>>& dp) {
        if (i < 0 && j < 0)
            return true;
        if (j < 0 && i >= 0)
            return false;
        if (i < 0 && j >= 0) {
            for (int k = 0; k <= j; k++) {
                if (s2[k] != '*')
                    return false;
            }
            return true;
        }
        if (dp[i][j] != -1)
            return dp[i][j];

        if (s1[i] == s2[j] || s2[j] == '?')
            return dp[i][j] = solve(i - 1, j - 1, s1, s2, dp);
        if (s2[j] == '*') {
            return dp[i][j] = solve(i - 1, j, s1, s2, dp) ||
                              solve(i, j - 1, s1, s2, dp);
        }

        return dp[i][j] = false;
    }

    // tabulation
    bool iisMatch(string s1, string s2) {
        int m = s1.size();
        int n = s2.size();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));

        dp[0][0] = true;
        for (int i = 1; i <= m; i++) {
            dp[i][0] = false;
        }

        for (int j = 1; j <= n; j++) {
            bool flag = true;
            for (int k = 1; k <= j; k++) {
                if (s2[k - 1] != '*') {
                    flag = false;
                    break;
                }
            }
            dp[0][j] = flag;
        }

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1[i - 1] == s2[j - 1] || s2[j - 1] == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (s2[j - 1] == '*') {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else {
                    dp[i][j] = false;
                }
            }
        }

        return dp[m][n];
    }

    // space optimise
    bool isMatch(string s1, string s2) {
        int m = s1.size();
        int n = s2.size();
        vector<bool> prev(m + 1, false), cur(n + 1, false);

        prev[0] = true;

        for (int j = 1; j <= n; j++) {
            bool flag = true;
            for (int k = 1; k <= j; k++) {
                if (s2[k - 1] != '*') {
                    flag = false;
                    break;
                }
            }
            prev[j] = flag;
        }

        for (int i = 1; i <= m; i++) {
            cur[0] = false;
            for (int j = 1; j <= n; j++) {
                if (s1[i - 1] == s2[j - 1] || s2[j - 1] == '?') {
                    cur[j] = prev[j - 1];
                } else if (s2[j - 1] == '*') {
                    cur[j] = prev[j] || cur[j - 1];
                } else {
                    cur[j] = false;
                }
            }
            prev = cur;
        }
        return prev[n];
    }
};
