class Solution {
public:
    int dfs(int i, int j, vector<vector<int>>& grid, vector<vector<int>> &dp){
        if(dp[i][j] != -1) return dp[i][j];
        int m = grid.size(), n = grid[0].size();
        int longPath = 1;

        vector<pair<int, int>> dir = {{0,-1}, {0,1}, {1,0}, {-1,0}};
        for(int d=0; d<4; d++){
            int nr = i + dir[d].first, nc = j + dir[d].second;
            if(nr >= 0 && nr < m && nc >= 0 && nc < n && grid[nr][nc] > grid[i][j]){
                longPath = max(longPath , 1 + dfs(nr, nc, grid, dp));
            }
        }
        return dp[i][j] = longPath;
    } 

    int longestIncreasingPath(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int maxi = 0;
        vector<vector<int>> dp(m, vector<int>(n, -1));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                maxi = max(maxi, dfs(i, j, grid, dp));
            }
        }
        return maxi;
    }
};
