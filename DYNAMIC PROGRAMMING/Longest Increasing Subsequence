class Solution {
public:
    // memoizaton
    int solve(int i, int j, int n, vector<int>& nums, vector<vector<int>>& dp) {
        if (i == n)
            return 0;
        if (dp[i][j + 1] != -1)
            return dp[i][j + 1];

        int noTake = solve(i + 1, j, n, nums, dp);
        int take = 0;
        if (j == -1 || nums[i] > nums[j]) {
            take = 1 + solve(i + 1, i, n, nums, dp);
        }
        return dp[i][j + 1] = max(take, noTake);
    }

    // tabulation
    int lengthhOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));

        for (int i = n - 1; i >= 0; --i) {
            for (int j = i - 1; j >= -1; --j) {
                int notTake = dp[i + 1][j + 1];
                int take = 0;
                if (j == -1 || nums[i] > nums[j]) {
                    take = 1 + dp[i + 1][i + 1];
                }
                dp[i][j + 1] = max(take, notTake);
            }
        }
        return dp[0][0];
    }

    // space optimise
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> next(n + 1, 0), cur(n + 1, 0);

        for (int i = n - 1; i >= 0; --i) {
            for (int j = i - 1; j >= -1; --j) {
                int notTake = next[j + 1];
                int take = 0;
                if (j == -1 || nums[i] > nums[j]) {
                    take = 1 + next[i + 1];
                }
                cur[j + 1] = max(take, notTake);
            }
            next = cur;
        }
        return next[0];
    }
};
