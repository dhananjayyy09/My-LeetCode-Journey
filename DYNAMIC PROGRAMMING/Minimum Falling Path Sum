class Solution {
public:
    int solve(int i, int j, int m, int n, vector<vector<int>>& matrix,
              vector<vector<int>>& dp) {
        if (j < 0 || j >= n)
            return 1e9;
        if (i == m)
            return 0;
        if (dp[i][j] != -1)
            return dp[i][j];

        int left = matrix[i][j] + solve(i + 1, j - 1, m, n, matrix, dp);
        int down = matrix[i][j] + solve(i + 1, j, m, n, matrix, dp);
        int right = matrix[i][j] + solve(i + 1, j + 1, m, n, matrix, dp);

        dp[i][j] = min({left, down, right});
        return dp[i][j];
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        int mini = 1e9;
        for (int j = 0; j < n; j++) {
            mini = min(mini, solve(0, j, m, n, matrix, dp));
        }
        return mini;
    }

    // tabulation
     int minFallinggPathSum(vector<vector<int>>& matrix) {
         int m = matrix.size();
         int n = matrix[0].size();
         vector<vector<int>> dp(m, vector<int>(n, 0));

        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int left = (j > 0) ? dp[i - 1][j - 1] : 1e9;
                int down = dp[i - 1][j];
                int right = (j < n - 1) ? dp[i - 1][j + 1]: 1e9;

                dp[i][j]= matrix[i][j]+ min({left,down,right});
            }
        }
        int mini = 1e9;
        for(int j=0;j<n;j++){
            mini =  min(mini,dp[m-1][j]);
        }
        return mini;
    }
};
