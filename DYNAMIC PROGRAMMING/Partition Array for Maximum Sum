class Solution {
public:
    // memoization
    int solve(int i, int n, int k, vector<int>& arr, vector<int>& dp) {
        if (i == n)
            return 0;
        if (dp[i] != -1)
            return dp[i];

        int len = 0;
        int maxSum = -1e9;
        int maxi = -1e9;
        for (int j = i; j < min(i + k, n); j++) {
            len++;
            maxi = max(maxi, arr[j]);
            int sum = (len * maxi) + solve(j + 1, n, k, arr, dp);
            maxSum = max(sum, maxSum);
        }
        return dp[i] = maxSum;
    }

    int maxSumAfterPartitioningg(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n + 1, -1);
        return solve(0, n, k, arr, dp);
    }

    //tabulation
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n + 1, 0);

        for (int i = n - 1; i >= 0; i--) {
            int len = 0;
            int maxSum = -1e9;
            int maxi = -1e9;
            for (int j = i; j < min(i + k, n); j++) {
                len++;
                maxi = max(maxi, arr[j]);
                int sum = (len * maxi) + dp[j + 1];
                maxSum = max(sum, maxSum);
            }
            dp[i] = maxSum;
        }
        return dp[0];
    }
};
