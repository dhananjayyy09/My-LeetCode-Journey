class Solution {
public:
    int res = -1;
    void dfs(int u, vector<int>&edges, vector<bool>&visited, vector<bool>&inRec, vector<int>&count){
        if(u != -1){
            visited[u] = true;
            inRec[u] = true;

            int v = edges[u];
            if(v != -1 && !visited[v]){
                count[v] = count[u] + 1;
                dfs(v, edges, visited, inRec, count);
            } 
            else if(v != -1 && inRec[v]){
                res = max(res, count[u] - count[v] +1);
            }
            inRec[u] = false;
        }
    }

    int longestCycle(vector<int>& edges) {
        int n  = edges.size();
        vector<bool> visited(n, false);
        vector<bool> inRec(n, false);
        vector<int> count(n, 1);

        for(int i=0; i<n; i++){
            if(!visited[i]){
                dfs(i, edges, visited, inRec, count);
            }
        }
        return res;
    }
};s\
