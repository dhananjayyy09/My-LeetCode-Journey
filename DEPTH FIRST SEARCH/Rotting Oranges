class Solution {
public:
    void dfs(vector<vector<int>> &grid, int i, int j, int time){
        int m = grid.size(), n = grid[0].size();
        if(i<0 || i>=m || j<0 || j>=n || grid[i][j] == 0)
           return; 

        if(grid[i][j] != 1 && grid[i][j] < time+2) 
            return;

        grid[i][j] = time + 2;
        dfs(grid, i+1, j, time+1);
        dfs(grid, i-1, j, time+1);
        dfs(grid, i, j+1, time+1);
        dfs(grid, i, j-1, time+1);
    }

    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int mint = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 2){
                    dfs(grid, i, j, 0); 
                }
            }
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1) return -1;
                if(grid[i][j] > 2){
                    mint = max(mint, grid[i][j]-2);
                }
            }
        }
        return mint;
    }
};
