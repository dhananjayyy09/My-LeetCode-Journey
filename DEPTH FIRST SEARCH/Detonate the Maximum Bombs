class Solution {
public:
    int dfs(int node, vector<bool> &visited, unordered_map<int, vector<int>> &adj){
        visited[node] = true;
        int count = 1;
        for(auto &it : adj[node]){
            if(!visited[it]){
                count += dfs(it, visited, adj);
            }
        }
        return count;
    }

    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        unordered_map<int, vector<int>> adj;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i == j) continue;
                long long x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2]; 
                long long x2 = bombs[j][0], y2 = bombs[j][1], r2 = bombs[j][2]; 
                long long d = ((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
                if(r1*r1 >= d){
                    adj[i].push_back(j);
                }
            }
        }

        int res = 0;
        for(int i=0; i<n; i++){
            vector<bool> visited(n, false);
            res = max(res, dfs(i, visited, adj));
        }
        return res;
    }
};
