class Solution {
public:
    long long dfs(int node, unordered_map<int, vector<int>> &adj, vector<bool> &visited){
        visited[node] = true;
        long long count = 1;
        for(auto &v : adj[node]){
            if(!visited[v]){
                count += dfs(v, adj, visited);
            }
        }
        return count;
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;
        for(auto &e : edges){
            int u = e[0];
            int v = e[1];
            adj[u].push_back(v); 
            adj[v].push_back(u); 
        }
        vector<bool> visited(n, false);
        vector<int> comp;
        long long size = 0;
        long long pairs = 0;
        int curRem = n;

        for(int i=0; i<n; i++){
            if(!visited[i]){
                long long size = dfs(i, adj, visited);
                pairs += size * (curRem - size);
                curRem -= size;
            }
        }
        return pairs;
    }
};
