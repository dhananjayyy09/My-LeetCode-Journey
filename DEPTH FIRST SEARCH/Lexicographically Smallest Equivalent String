class Solution {
public:
    char dfs(char ch, unordered_map<char, vector<char>> &adj, vector<int> &visited){
        visited[ch - 'a'] = 1;
        char mini = ch;
        for(auto &c : adj[ch]){
            if(visited[c-'a'] == 0){
                mini = min(mini, dfs(c, adj, visited));
            }
        }
        return mini;
    }

    string smallestEquivalentString(string s1, string s2, string base) {
        int m = s1.size();
        int n = base.size();
        string ans;
        unordered_map<char, vector<char>> adj;

        for(int i=0; i<m ;i++){
            char u = s1[i];
            char v = s2[i];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for(int i=0; i<n; i++){
            char c = base[i];
            vector<int> visited(26,0);
            char mini = dfs(c, adj, visited);
            ans.push_back(mini);
        }
        return ans;
    }
};
