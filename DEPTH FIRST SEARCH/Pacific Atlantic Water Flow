class Solution {
public:
    void dfs(vector<vector<int>> &h, vector<vector<bool>> &v, int i, int j, int prev){
        int m = h.size(), n = h[0].size();
        if(i<0 || i>=m || j<0 || j>=n || v[i][j] || h[i][j] < prev)
            return;
        
        v[i][j] = true;
        dfs(h, v, i+1, j, h[i][j]);
        dfs(h, v, i-1, j, h[i][j]);
        dfs(h, v, i, j+1, h[i][j]);
        dfs(h, v, i, j-1, h[i][j]);
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& h) {
        int m = h.size(), n = h[0].size();
        vector<vector<bool>> pac(m, vector<bool>(n, false));
        vector<vector<bool>> atl(m, vector<bool>(n, false));
        vector<vector<int>> res;

        for(int i=0; i<m; i++){
            dfs(h, pac, i, 0, h[i][0]);
            dfs(h, atl, i, n-1, h[i][n-1]);
        }

        for(int j=0; j<n; j++){
            dfs(h, pac, 0, j, h[0][j]);
            dfs(h, atl, m-1, j, h[m-1][j]);
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(pac[i][j] && atl[i][j]){
                    res.push_back({i,j});
                }
            }
        }
        return res;
    }
};
