class Solution {
public:
    void dfs(vector<vector<int>> & grid, int i, int j) {
        int m = grid.size(), n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 1)
            return;
        grid[i][j] = 1;
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
    }

    int regionsBySlashes(vector<string>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        vector<vector<int>> reg(m*3, vector<int>(n*3, 0));
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == '/'){
                    reg[i*3+0][j*3+2] = 1;
                    reg[i*3+1][j*3+1] = 1;
                    reg[i*3+2][j*3+0] = 1;
                }
                else if(grid[i][j] == '\\'){
                    reg[i*3+0][j*3+0] = 1;
                    reg[i*3+1][j*3+1] = 1;
                    reg[i*3+2][j*3+2] = 1;
                }
            }
        }

        for(int i=0; i<m*3; i++){
            for(int j=0; j<n*3; j++){
                if(reg[i][j] == 0){
                    dfs(reg, i, j);
                    count++;
                }
            }
        }
        return count;
    }
};
