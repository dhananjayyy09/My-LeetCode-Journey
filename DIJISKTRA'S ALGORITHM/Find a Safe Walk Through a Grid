class Solution {
public:
    bool findSafeWalk(vector<vector<int>>& grid, int health) {
        int m = grid.size(), n = grid[0].size();
        if(health <= 0) return false;

        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<>> pq;
        vector<pair<int, int>> dirs = {{0,-1}, {0,1}, {1,0}, {-1,0}};
        vector<vector<int>> dist(m, vector<int>(n, 1e9));
        dist[0][0] = grid[0][0];
        pq.push({grid[0][0], {0,0}});

        while(!pq.empty()){
            int cost = pq.top().first;
            int row = pq.top().second.first;
            int col = pq.top().second.second;
            pq.pop();

            if(row == m-1 && col == n-1 && cost <= health-1) return true;
            for(auto[dr, dc] : dirs){
                int nr = row+dr, nc = col+dc;
                if(nr>=0 && nr<m && nc>=0 && nc<n){
                    int newCost = cost + grid[nr][nc];
                    if(newCost < dist[nr][nc]) {
                        dist[nr][nc] = newCost;
                        pq.push({newCost, {nr, nc}});
                    }
                }
            }
        }
        return false;
    }
};
