class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>>> pq;
        vector<vector<int>> minCost(m, vector<int>(n, 1e9));
        vector<pair<int, int>> dir = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        pq.push({0, {0, 0}});
        minCost[0][0] = 0;

        while(!pq.empty()){
            auto cost = pq.top().first;
            auto row = pq.top().second.first;
            auto col = pq.top().second.second;
            pq.pop();

            if(row == m-1 && col == n-1) return cost;
            for(int i=0; i<4; i++){
                int nr = row + dir[i].first, nc = col + dir[i].second;
                if(nr >= 0 && nr < m && nc >=0 && nc <n){
                    int dirCost = (grid[row][col] - 1 == i ? 0 : 1);
                    int newCost = cost + dirCost;
                    if(newCost < minCost[nr][nc]){
                        minCost[nr][nc] = newCost;
                        pq.push({newCost, {nr, nc}});
                    }
                } 
            }
        }
        return -1;
    }
};
